{"version":3,"sources":["types/Status.ts","api/users.ts","api/todos.ts","components/TodoItem/index.ts","components/TodoItem/TodoItem.tsx","components/TodoList/index.ts","components/TodoList/TodoList.tsx","components/TodosFilter/index.ts","components/TodosFilter/TodosFilter.tsx","App.tsx","index.tsx"],"names":["Status","API_URL","USER_ID","getUser","userId","a","fetch","response","ok","json","getTodos","postTodo","todo","headers","method","body","JSON","stringify","patchTodo","todoId","deleteTodo","TodoItem","React","memo","setTodos","useState","editing","setEditing","title","setTitle","editRef","useRef","document","createElement","toggleCompleted","useCallback","id","completed","then","destroyTodo","enableEditing","applyTitle","handleKeyPress","event","key","useEffect","current","focus","className","classNames","type","checked","onChange","onDoubleClick","onClick","ref","value","target","onBlur","onKeyDown","TodoList","todos","map","TodosFilter","path","element","All","to","Active","filter","Completed","App","isLoading","setLoading","user","setUser","input","setInput","activeTodos","useMemo","placeholder","userFromServer","addTodo","preventDefault","toggleAll","newTodos","length","forEach","push","clearCompleted","name","onSubmit","htmlFor","isActive","selected","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.61789c59.chunk.js","sourcesContent":["export enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","const API_URL = 'https://mate.academy/students-api/users';\n\nexport const USER_ID = 2451;\n\nconst user = {\n  name: 'Valerie Troitska',\n  username: 'trtskvalerie',\n  email: 'val@mymail.moc',\n  phone: '800851337',\n};\n\nexport const getUser = async (userId: number): Promise<User> => {\n  const response = await fetch(`${API_URL}/${userId}`);\n\n  return response.ok ? response.json() : null;\n};\n\nexport const postUser = async (): Promise<User> => {\n  const response = await fetch(API_URL, {\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    method: 'POST',\n    body: JSON.stringify(user),\n  });\n\n  return response.json();\n};\n","const API_URL = 'https://mate.academy/students-api/todos';\n\ntype Patch = {\n  completed?: boolean,\n  title?: string,\n};\n\nexport const getTodos = async (userId: number): Promise<Todo[]> => {\n  const response = await fetch(`${API_URL}?userId=${userId}`);\n\n  return response.ok ? response.json() : [];\n};\n\nexport const postTodo = async (todo: TodoToPost): Promise<Todo> => {\n  const response = await fetch(API_URL, {\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    method: 'POST',\n    body: JSON.stringify(todo),\n  });\n\n  return response.json();\n};\n\nexport const patchTodo = async (todoId: number, body: Patch): Promise<Todo> => {\n  const response = await fetch(`${API_URL}/${todoId}`, {\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    method: 'PATCH',\n    body: JSON.stringify(body),\n  });\n\n  return response.json();\n};\n\nexport const deleteTodo = async (todoId: number): Promise<Todo> => {\n  const response = await fetch(`${API_URL}/${todoId}`, { method: 'DELETE' });\n\n  return response.json();\n};\n","import { TodoItem } from './TodoItem';\n\nexport default TodoItem;\n","/* eslint-disable jsx-a11y/control-has-associated-label */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\n\nimport { USER_ID } from '../../api/users';\nimport { deleteTodo, getTodos, patchTodo } from '../../api/todos';\n\ntype Props = {\n  todo: Todo,\n  setTodos: (todos: Todo[]) => void,\n};\n\nexport const TodoItem: React.FC<Props> = React.memo(({ todo, setTodos }) => {\n  const [editing, setEditing] = useState(false);\n  const [title, setTitle] = useState(todo.title);\n\n  const editRef = useRef(document.createElement('input'));\n\n  const toggleCompleted = useCallback(() => {\n    patchTodo(todo.id, { completed: !todo.completed })\n      .then(() => getTodos(USER_ID))\n      .then(setTodos);\n  }, [todo]);\n\n  const destroyTodo = useCallback(() => {\n    deleteTodo(todo.id)\n      .then(() => getTodos(USER_ID))\n      .then(setTodos);\n  }, [todo]);\n\n  const enableEditing = useCallback(() => {\n    setEditing(true);\n  }, []);\n\n  const applyTitle = useCallback(() => {\n    if (!title) {\n      deleteTodo(todo.id)\n        .then(() => getTodos(USER_ID))\n        .then(setTodos);\n    } else {\n      setEditing(false);\n      patchTodo(todo.id, { title })\n        .then(() => getTodos(USER_ID))\n        .then(setTodos);\n    }\n  }, [title]);\n\n  const handleKeyPress = useCallback(\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\n      switch (event.key) {\n        case 'Enter':\n          applyTitle();\n          break;\n\n        case 'Escape':\n          setEditing(false);\n          setTitle(todo.title);\n          break;\n\n        default:\n          break;\n      }\n    },\n    [todo],\n  );\n\n  useEffect(() => {\n    if (editing) {\n      editRef.current.focus();\n    }\n  }, [editing]);\n\n  return (\n    <li\n      key={todo.id}\n      className={classNames(\n        { completed: todo.completed },\n        { editing },\n      )}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onChange={toggleCompleted}\n        />\n\n        <label onDoubleClick={enableEditing}>{todo.title}</label>\n\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={destroyTodo}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        ref={editRef}\n        value={title}\n        onChange={(event) => setTitle(event.target.value)}\n        onBlur={applyTitle}\n        onKeyDown={handleKeyPress}\n      />\n    </li>\n  );\n});\n","import { TodoList } from './TodoList';\n\nexport default TodoList;\n","import React from 'react';\nimport TodoItem from '../TodoItem';\n\ntype Props = {\n  todos: Todo[],\n  setTodos: (todos: Todo[]) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, setTodos }) => {\n  return (\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <TodoItem todo={todo} setTodos={setTodos} key={todo.id} />\n      ))}\n    </ul>\n  );\n};\n","import { TodosFilter } from './TodosFilter';\n\nexport default TodosFilter;\n","import React from 'react';\nimport { Route, Routes, Navigate } from 'react-router-dom';\n\nimport TodoList from '../TodoList';\n\nimport { Status } from '../../types/Status';\n\ntype Props = {\n  todos: Todo[],\n  setTodos: (todos: Todo[]) => void,\n};\n\nexport const TodosFilter: React.FC<Props> = React.memo(({ todos, setTodos }) => (\n  <Routes>\n    <Route path=\"/\" element={<TodoList todos={todos} setTodos={setTodos} />} />\n    <Route path={Status.All} element={<Navigate to=\"/\" />} />\n    <Route\n      path={Status.Active}\n      element={(\n        <TodoList\n          todos={todos.filter(todo => !todo.completed)}\n          setTodos={setTodos}\n        />\n      )}\n    />\n    <Route\n      path={Status.Completed}\n      element={(\n        <TodoList\n          todos={todos.filter(todo => todo.completed)}\n          setTodos={setTodos}\n        />\n      )}\n    />\n\n    <Route path=\"*\" element={<Navigate to=\"/\" />} />\n  </Routes>\n));\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport { USER_ID, getUser } from './api/users';\nimport {\n  deleteTodo,\n  getTodos,\n  postTodo,\n  patchTodo,\n} from './api/todos';\n\nimport { Status } from './types/Status';\n\nimport TodosFilter from './components/TodosFilter';\n\nconst App: React.FC = () => {\n  const [isLoading, setLoading] = useState(true);\n  const [user, setUser] = useState<User | null>(null);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [input, setInput] = useState('');\n\n  const activeTodos = useMemo(() => (\n    todos.filter(todo => !todo.completed)\n  ), [todos]);\n\n  const placeholder = useMemo(() => (\n    isLoading ? 'Loading...' : 'Couldn\\'t connect to server'\n  ), [isLoading]);\n\n  useEffect(() => {\n    getTodos(USER_ID).then(setTodos);\n    getUser(USER_ID)\n      .then(userFromServer => {\n        setUser(userFromServer);\n        setLoading(false);\n      });\n  }, []);\n\n  const addTodo = useCallback((event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newTodo: TodoToPost = {\n      userId: USER_ID,\n      title: input,\n      completed: false,\n    };\n\n    postTodo(newTodo)\n      .then(() => {\n        setInput('');\n        getTodos(USER_ID).then(setTodos);\n      });\n  }, [USER_ID, input]);\n\n  const toggleAll = useCallback(() => {\n    const newTodos: Todo[] = [];\n\n    if (activeTodos.length === 0 || activeTodos.length === todos.length) {\n      todos.forEach(todo => {\n        patchTodo(todo.id, { completed: !todo.completed });\n        newTodos.push({ ...todo, completed: !todo.completed });\n      });\n    } else {\n      todos.forEach(todo => {\n        if (!todo.completed) {\n          patchTodo(todo.id, { completed: true });\n          newTodos.push({ ...todo, completed: true });\n        } else {\n          newTodos.push(todo);\n        }\n      });\n    }\n\n    setTodos(newTodos);\n  }, [todos, activeTodos]);\n\n  const clearCompleted = useCallback(() => {\n    const newTodos: Todo[] = [];\n\n    todos.forEach(todo => {\n      if (todo.completed) {\n        deleteTodo(todo.id);\n      } else {\n        newTodos.push(todo);\n      }\n    });\n\n    setTodos(newTodos);\n  }, [todos]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>\n          {user\n            ? `${user.name} todos`\n            : placeholder}\n        </h1>\n\n        <form onSubmit={addTodo}>\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={input}\n            onChange={(event) => setInput(event.target.value)}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onChange={toggleAll}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        {todos.length > 0 && <TodosFilter todos={todos} setTodos={setTodos} />}\n      </section>\n\n      {todos.length > 0 && (\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {`${activeTodos.length} items left`}\n          </span>\n\n          <ul className=\"filters\">\n            <li>\n              <NavLink\n                to=\"/\"\n                className={({ isActive }) => classNames({ selected: isActive })}\n              >\n                All\n              </NavLink>\n            </li>\n\n            <li>\n              <NavLink\n                to={`/${Status.Active}`}\n                className={({ isActive }) => classNames({ selected: isActive })}\n              >\n                Active\n              </NavLink>\n            </li>\n\n            <li>\n              <NavLink\n                to={`/${Status.Completed}`}\n                className={({ isActive }) => classNames({ selected: isActive })}\n              >\n                Completed\n              </NavLink>\n            </li>\n          </ul>\n\n          {activeTodos.length !== todos.length && (\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={clearCompleted}\n            >\n              Clear completed\n            </button>\n          )}\n        </footer>\n      )}\n    </section>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}